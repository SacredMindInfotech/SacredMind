// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  clerkuserId String       @unique
  email       String       @unique
  phoneNumber String?
  firstName   String
  lastName    String?
  imageUrl    String?
  role        Role?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  courses     UserCourse[]
}

model Course {
  id               Int           @id @default(autoincrement())
  title            String        @unique
  description      String
  isActive         Boolean       @default(false)
  showCourseNotice Boolean       @default(true)
  price            Float
  courseNotice     String?
  imageUrl         String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  published        Boolean?      @default(true)
  users            UserCourse[]
  categoryId       Int
  category         Category      @relation(fields: [categoryId], references: [id])
  overview         String[]
  learningOutcomes String[]
  requirements     String[]
  forwhom          String[]
  language         String        @default("English")
  modules          Module[]
}

model Module {
  id           Int     @id @default(autoincrement())
  serialNumber Int     @default(1)
  title        String
  courseId     Int
  course       Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  topics       Topic[]
}

model Topic {
  id           Int       @id @default(autoincrement())
  serialNumber Int       @default(1)
  title        String
  description  String
  moduleId     Int
  module       Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  contents     Content[]
}

model Content {
  id      Int         @id @default(autoincrement())
  name    String
  topicId Int
  topic   Topic       @relation(fields: [topicId], references: [id], onDelete: Cascade)
  type    ContentType
  key     String      @unique
}

enum ContentType {
  VIDEO
  PDF
  EXCEL
  TEXT
  IMAGE
}

model Category {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  parentId      Int?
  parent        Category?  @relation("Subcategories", fields: [parentId], references: [id])
  subcategories Category[] @relation("Subcategories")
  courses       Course[]
}

model UserCourse {
  id         Int      @id @default(autoincrement())
  userId     Int
  courseId   Int
  enrolledAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  course     Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Job {
  id               Int         @id @default(autoincrement())
  title            String
  description      String
  responsibilities String[]
  requirements     String[]
  skills           String[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  published        Boolean?    @default(false)
  location         JobLocation
  salary           String?
  type             JobType
  experience       String
  education        String
  jobCategoryId    Int
  jobCategory      JobCategory @relation(fields: [jobCategoryId], references: [id])
}

model JobCategory {
  id   Int    @id @default(autoincrement())
  name String @unique
  jobs Job[]
}

model Transaction {
  id                Int               @id @default(autoincrement())
  name              String
  email             String
  phone             String?
  courseId          Int
  razorpayOrderId   String            @unique
  razorpayPaymentId String? // Null if payment fails
  razorpaySignature String?
  amount            Float
  currency          String            @default("INR")
  status            TransactionStatus @default(INITIATED)
  createdAt         DateTime          @default(now())
}

model DiscountToken {
  id                 Int      @id @default(autoincrement())
  token              String   @unique
  discountPercentage Float    @default(0)
  courseIds          Int[]
  expiresAt          DateTime
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())

  @@index([expiresAt])
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum JobLocation {
  REMOTE
  HYBRID
  ON_SITE
}

enum TransactionStatus {
  INITIATED
  SUCCESS
  FAILED
}
